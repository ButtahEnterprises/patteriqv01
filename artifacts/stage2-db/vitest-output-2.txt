
> patterniq-v01@0.1.0 test
> vitest run --passWithNoTests


 RUN  v1.6.1 /Users/chazhatfield/Desktop/AI Porjects/patterniq-v01

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 📡 observe env with Radar: https://dotenvx.com/radar

Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "patterniq_test", schema "public" at "localhost:54329"

The PostgreSQL database "patterniq_test" schema "public" at "localhost:54329" was successfully reset.

🚀  Your database is now in sync with your Prisma schema. Done in 49ms

stdout | tests/setup/db.ts:15:11
[tests/setup/db] Resetting test database via: prisma db push --force-reset

stdout | tests/smoke.test.ts > GET /api/data-health (Demo & Live) → array length >= 8 and correct shape
[2025-08-11T21:22:54.680Z] INFO API success {
  rid: 'b6bba49b-93dc-426b-9713-d156f5e97331',
  url: 'http://localhost/api/data-health?weeks=12',
  ms: 1
}
[SMOKE] /api/data-health Demo mode → length=12, sample= {
  isoWeek: '2025-05-26',
  totalStores: 113,
  pseudoStores: 6,
  pctFullAllocated: 94.7
}

stdout | tests/smoke.test.ts > GET /api/data-health (Demo & Live) → array length >= 8 and correct shape
[2025-08-11T21:22:54.716Z] INFO API success {
  rid: '265781f8-e063-4c94-b7c4-5b392120536a',
  url: 'http://localhost/api/data-health?weeks=12',
  ms: 34
}
[SMOKE] /api/data-health Live mode → length=0, sample= undefined

stdout | tests/smoke.test.ts > API smoke tests > GET /api/health → db.up === true and latencyMs is number
[2025-08-11T21:22:54.724Z] INFO API success {
  rid: '6d9eab5a-9da6-48a7-9174-2010ab7d9ed7',
  url: 'http://localhost/api/health',
  ms: 2
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/weekly-summary → returns week string and kpis array
[2025-08-11T21:22:54.728Z] INFO API success {
  rid: 'aa2239fc-536b-4d5c-84b1-b28cf89d16c9',
  url: 'http://localhost/api/weekly-summary',
  ms: 0
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/kpi/trend (Demo & Live) → array length >= 8 and ascending isoWeek when present
[2025-08-11T21:22:54.729Z] INFO API success {
  rid: 'b7dc505c-9a4a-4439-9e16-52012f7256eb',
  url: 'http://localhost/api/kpi/trend?weeks=8',
  ms: 0
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/kpi/trend (Demo & Live) → array length >= 8 and ascending isoWeek when present
[2025-08-11T21:22:54.731Z] INFO API success {
  rid: '481f516d-9d5d-4c97-b953-53475b970510',
  url: 'http://localhost/api/kpi/trend?weeks=8',
  ms: 2
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores-at-risk (Demo & Live) → <= 10 items; each has { storeId, storeName, zScore:number, pctChange:number }
[2025-08-11T21:22:54.731Z] INFO API success {
  rid: '849a7abf-f37e-470a-9392-ef1ea7b9fdd9',
  url: 'http://localhost/api/stores-at-risk',
  ms: 0
}
[2025-08-11T21:22:54.732Z] INFO API success {
  rid: '71826b56-9fb2-4414-9188-33642486d5b7',
  url: 'http://localhost/api/stores-at-risk',
  ms: 0
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/trend (Demo & Live) → array of { isoWeek, revenue, units }
[2025-08-11T21:22:54.734Z] INFO API success {
  rid: '73f5951b-271b-4f9a-be74-9545eb5fc42a',
  url: 'http://localhost/api/stores/101/trend?weeks=8',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/trend (Demo & Live) → array of { isoWeek, revenue, units }
[2025-08-11T21:22:54.735Z] INFO API success {
  rid: 'c595c336-d44f-4ace-a992-dd66fb073350',
  url: 'http://localhost/api/stores-at-risk',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/trend (Demo & Live) → array of { isoWeek, revenue, units }
[2025-08-11T21:22:54.737Z] INFO API success {
  rid: '83fd34b0-74bf-4056-9e0a-32e37f1d7a86',
  url: 'http://localhost/api/stores/1/trend?weeks=8',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/sku-breakdown (Demo & Live) → object with items[]
[2025-08-11T21:22:54.738Z] INFO API success {
  rid: 'd136300d-377d-4078-bdba-7a8094b11fc3',
  url: 'http://localhost/api/stores/101/sku-breakdown?week=latest',
  ms: 0
}
[2025-08-11T21:22:54.740Z] INFO API success {
  rid: 'c7e1fc7a-0c50-4da0-aad7-2491e515cae8',
  url: 'http://localhost/api/stores-at-risk',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/sku-breakdown (Demo & Live) → object with items[]
[2025-08-11T21:22:54.743Z] INFO API success {
  rid: '16c369ab-a923-4806-8e5f-f15a9a053fc3',
  url: 'http://localhost/api/stores/1/sku-breakdown?week=latest',
  ms: 3
}

 ✓ tests/smoke.test.ts  (7 tests) 68ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 prevent building .env in docker: https://dotenvx.com/prebuild

stdout | tests/api/leaderboards.test.ts > Leaderboards API > GET /api/leaderboards/top-products?by=units&limit=5 (demo & live)
[2025-08-11T21:22:54.752Z] INFO API success {
  rid: '95a44374-2f2e-45c0-9416-21d74698ab3f',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=true][by=units] sample= {
  skuId: 20005,
  skuName: 'Flux SKU 6',
  brand: 'Flux',
  revenue: 10950,
  units: 987
}
[2025-08-11T21:22:54.753Z] INFO API success {
  rid: 'f11b9d58-a2c6-43d0-8390-a43054b35ea1',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=false][by=units] sample= {
  skuId: 20005,
  skuName: 'Flux SKU 6',
  brand: 'Flux',
  revenue: 10950,
  units: 987
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API > GET /api/leaderboards/top-products?by=revenue&limit=5 (demo & live)
[2025-08-11T21:22:54.753Z] INFO API success {
  rid: '777c1648-8957-46a8-b6f2-8182ea7d31d6',
  url: 'http://test.local/api/leaderboards/top-products?by=revenue&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=true][by=revenue] sample= {
  skuId: 20010,
  skuName: 'Acme SKU 11',
  brand: 'Acme',
  revenue: 27970,
  units: 371
}
[2025-08-11T21:22:54.753Z] INFO API success {
  rid: 'f7eaf96c-0d46-49c0-a88b-96062ad7950f',
  url: 'http://test.local/api/leaderboards/top-products?by=revenue&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=false][by=revenue] sample= {
  skuId: 20010,
  skuName: 'Acme SKU 11',
  brand: 'Acme',
  revenue: 27970,
  units: 371
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API > GET /api/leaderboards/top-stores?limit=5 (demo & live)
[2025-08-11T21:22:54.754Z] INFO API success {
  rid: 'bd35feb2-3a3d-40b5-bdf8-849dd217a711',
  url: 'http://test.local/api/leaderboards/top-stores?limit=5',
  ms: 0
}
[LEADERBOARDS][stores][demo=true] sample= {
  storeId: 104,
  storeName: 'Store #104',
  city: 'Miami',
  state: 'FL',
  revenue: 116984,
  units: 1811
}
[2025-08-11T21:22:54.754Z] INFO API success {
  rid: '121c7132-ab13-42fe-bdf6-e13680e9bb5a',
  url: 'http://test.local/api/leaderboards/top-stores?limit=5',
  ms: 0
}
[LEADERBOARDS][stores][demo=false] sample= {
  storeId: 104,
  storeName: 'Store #104',
  city: 'Miami',
  state: 'FL',
  revenue: 116984,
  units: 1811
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > invalid 'by' defaults to units (demo & live)
[2025-08-11T21:22:54.754Z] INFO API success {
  rid: 'bd845439-8a66-4737-b68f-498246d6128f',
  url: 'http://test.local/api/leaderboards/top-products?by=invalid&limit=5',
  ms: 0
}
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: 'ca8fec6a-9885-4240-8773-52de687eb7a6',
  url: 'http://test.local/api/leaderboards/top-products?by=invalid&limit=5',
  ms: 1
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > limit clamps to [1,20] for products (demo only)
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: '1f250d54-bde8-420f-b821-3a78fe4e8805',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=0',
  ms: 0
}
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: 'f917c861-5b5a-488d-9606-7e9db46e7039',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=999',
  ms: 0
}
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: 'eb762ae8-8afb-4906-bad1-f632ad7d0206',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=5',
  ms: 0
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > limit clamps to [1,20] for stores (demo only)
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: '6490a0c9-18c8-4eb8-aa36-cb60561f05d1',
  url: 'http://test.local/api/leaderboards/top-stores?limit=0',
  ms: 0
}
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: '073c11d6-0f29-4681-9e7f-2ff44fe2b97c',
  url: 'http://test.local/api/leaderboards/top-stores?limit=999',
  ms: 0
}

 ✓ tests/api/leaderboards.test.ts  (7 tests) 4ms
stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > field types look correct for first item (demo only)
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: '567dfdd2-f0fb-4e43-8d09-f111ca3ca122',
  url: 'http://test.local/api/leaderboards/top-products?by=revenue&limit=5',
  ms: 0
}
[2025-08-11T21:22:54.755Z] INFO API success {
  rid: 'da909332-8f21-4441-993a-d688df1fb3b0',
  url: 'http://test.local/api/leaderboards/top-stores?limit=5',
  ms: 0
}

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  override existing env vars with { override: true }

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > fails with 400 when no Store-Sales files provided
[2025-08-11T21:22:54.771Z] INFO API success {
  rid: 'eacd834d-f4db-4497-aa05-30029113acca',
  url: 'http://localhost/api/ingest/ulta',
  ms: 1
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests store totals without allocator (fallback to pseudo-SKU)
[2025-08-11T21:22:54.821Z] INFO API success {
  rid: 'f0d6b553-c369-4e62-aa2b-6fa901f616ed',
  url: 'http://localhost/api/ingest/ulta',
  ms: 45
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests store totals without allocator (fallback to pseudo-SKU)
[2025-08-11T21:22:54.828Z] INFO API success {
  rid: '7ced7ad9-5b53-4ae1-aa80-a9bdf57ccce5',
  url: 'http://localhost/api/weekly-summary?view=facts&week=2025-08-17',
  ms: 6
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests with allocator and ignores additional allocator files; then idempotent on re-run
[2025-08-11T21:22:54.849Z] INFO API success {
  rid: '8b7ec14e-0b21-4658-8a31-a28f03826678',
  url: 'http://localhost/api/ingest/ulta',
  ms: 17
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests with allocator and ignores additional allocator files; then idempotent on re-run
[2025-08-11T21:22:54.881Z] INFO API success {
  rid: '13405d84-9ac5-48a1-aa38-6561836f51eb',
  url: 'http://localhost/api/ingest/ulta',
  ms: 29
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests with allocator and ignores additional allocator files; then idempotent on re-run
[2025-08-11T21:22:54.884Z] INFO API success {
  rid: '70f4cb6d-d3c1-4813-a7ae-448e5988a13d',
  url: 'http://localhost/api/weekly-summary?view=facts&week=2025-08-17',
  ms: 2
}

 ✓ tests/api/ingest.ulta.test.ts  (3 tests) 117ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  override existing env vars with { override: true }

stdout | tests/api/routes.test.ts > API routes return JSON > /api/config returns JSON with demoMode
[2025-08-11T21:22:54.920Z] INFO API success {
  rid: '9a8ec42c-e864-41ca-9c7f-32740d096cba',
  url: 'http://test.local/api/config',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/weekly-summary returns summary JSON in demo
[2025-08-11T21:22:54.920Z] INFO API success {
  rid: 'e6419056-f557-4fd9-a194-437fc9f18497',
  url: 'http://test.local/api/weekly-summary',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/kpi/trend returns array of points
[2025-08-11T21:22:54.921Z] INFO API success {
  rid: '8c71f98b-f143-4a83-a58f-e5400891250a',
  url: 'http://test.local/api/kpi/trend?weeks=12',
  ms: 1
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/promo-attribution returns array of attribution items (demo and non-demo cookie)
[2025-08-11T21:22:54.929Z] INFO API success {
  rid: 'fdc91959-2d75-4e07-b504-353d4e71d239',
  url: 'http://test.local/api/promo-attribution?years=2024,2025&baselineWeeks=4',
  ms: 8
}
[2025-08-11T21:22:54.930Z] INFO API success {
  rid: 'de58e06d-d0fc-48cf-a2e5-6345d3204547',
  url: 'http://test.local/api/promo-attribution?years=2024,2025&baselineWeeks=4',
  ms: 1
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/stores-at-risk returns array of stores
[2025-08-11T21:22:54.930Z] INFO API success {
  rid: '4e092108-1460-4fa5-a4ba-a34df4c80916',
  url: 'http://test.local/api/stores-at-risk?lookback=8&limit=10',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/data-health returns array of weekly health
[2025-08-11T21:22:54.930Z] INFO API success {
  rid: 'f0db9c43-e8da-4f33-8571-d6d8ca593c85',
  url: 'http://test.local/api/data-health?weeks=12',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/promotions returns array of promotions
[2025-08-11T21:22:54.931Z] INFO API success {
  rid: 'a08f3fa2-899b-4a98-9e6e-7ab6243ceccc',
  url: 'http://test.local/api/promotions?years=2024,2025',
  ms: 1
}

 ✓ tests/api/routes.test.ts  (7 tests) 11ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

 ✓ tests/components/leaderboards.test.ts  (12 tests) 28ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

 ✓ tests/api/weeks.test.ts  (1 test) 5ms
stdout | tests/api/weeks.test.ts > GET /api/weeks filters out future weeks > does not include future week rows
[2025-08-11T21:22:55.016Z] INFO API success {
  rid: '1d98bf1f-a877-4f25-aad0-b00915365f21',
  url: 'http://test.local/api/weeks',
  ms: 1
}

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 📡 version env with Radar: https://dotenvx.com/radar

 ✓ tests/components/dataHealthCard.test.ts  (3 tests) 3ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  suppress all logs with { quiet: true }

stdout | tests/api/ingest.ulta.warnings.test.ts > POST /api/ingest/ulta warnings (no allocator) > returns warnings indicating pseudo-UPC fallback
[2025-08-11T21:22:55.071Z] INFO API success {
  rid: '8f653f37-b093-4558-8827-513717bfc42d',
  url: 'http://localhost/api/ingest/ulta',
  ms: 7
}

 ✓ tests/api/ingest.ulta.warnings.test.ts  (1 test) 12ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 📡 observe env with Radar: https://dotenvx.com/radar

 ✓ tests/components/dataHealthCard.issues.test.ts  (1 test) 1ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  suppress all logs with { quiet: true }

 ✓ tests/components/breadcrumbs.test.tsx  (2 tests) 1ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' }

 ✓ tests/lib/week.test.ts  (3 tests) 1ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 📡 auto-backup env with Radar: https://dotenvx.com/radar

 ✓ tests/api/data-health.object.test.ts  (1 test) 1ms
stdout | tests/api/data-health.object.test.ts > GET /api/data-health (object response with issues, demo) > returns { data, issues } when includeIssues=1
[2025-08-11T21:22:55.095Z] INFO API success {
  rid: '4fbdf154-9197-40a0-94a5-44acda5a3d00',
  url: 'http://test.local/api/data-health?weeks=4&includeIssues=1',
  ms: 0
}

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "patterniq_test", schema "public" at "localhost:54329"

The PostgreSQL database "patterniq_test" schema "public" at "localhost:54329" was successfully reset.

🚀  Your database is now in sync with your Prisma schema. Done in 40ms

stdout | tests/setup/db.ts:15:11
[tests/setup/db] Resetting test database via: prisma db push --force-reset

 ✓ tests/components/weekPicker.test.tsx  (4 tests) 30ms

 Test Files  13 passed (13)
      Tests  52 passed (52)
   Start at  17:22:51
   Duration  5.18s (transform 315ms, setup 2.64s, collect 1.53s, tests 282ms, environment 362ms, prepare 103ms)

