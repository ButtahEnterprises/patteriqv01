
> patterniq-v01@0.1.0 test
> vitest run --passWithNoTests


 RUN  v1.6.1 /Users/chazhatfield/Desktop/AI Porjects/patterniq-v01

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 📡 observe env with Radar: https://dotenvx.com/radar

Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "patterniq_test", schema "public" at "localhost:54329"

The PostgreSQL database "patterniq_test" schema "public" at "localhost:54329" was successfully reset.

🚀  Your database is now in sync with your Prisma schema. Done in 35ms

stdout | tests/setup/db.ts:15:11
[tests/setup/db] Resetting test database via: prisma db push --force-reset

stdout | tests/smoke.test.ts > GET /api/data-health (Demo & Live) → array length >= 8 and correct shape
[2025-08-11T21:02:09.298Z] INFO API success {
  rid: 'f2356d67-d926-4c50-9aad-1d933adc685e',
  url: 'http://localhost/api/data-health?weeks=12',
  ms: 1
}
[SMOKE] /api/data-health Demo mode → length=12, sample= {
  isoWeek: '2025-05-26',
  totalStores: 113,
  pseudoStores: 6,
  pctFullAllocated: 94.7
}

stdout | tests/smoke.test.ts > GET /api/data-health (Demo & Live) → array length >= 8 and correct shape
[2025-08-11T21:02:09.327Z] INFO API success {
  rid: '71502577-fd8f-47aa-95da-be08ed64ebe2',
  url: 'http://localhost/api/data-health?weeks=12',
  ms: 27
}
[SMOKE] /api/data-health Live mode → length=0, sample= undefined

stdout | tests/smoke.test.ts > API smoke tests > GET /api/health → db.up === true and latencyMs is number
[2025-08-11T21:02:09.335Z] INFO API success {
  rid: '51eaa12e-92df-45a4-832d-eca3a06532c8',
  url: 'http://localhost/api/health',
  ms: 2
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/weekly-summary → returns week string and kpis array
[2025-08-11T21:02:09.339Z] INFO API success {
  rid: '3d1bbf03-198d-49de-918e-1490f5a58739',
  url: 'http://localhost/api/weekly-summary',
  ms: 0
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/kpi/trend (Demo & Live) → array length >= 8 and ascending isoWeek when present
[2025-08-11T21:02:09.340Z] INFO API success {
  rid: 'a4107bb6-aa3d-43ee-94b9-f7a3157ef9f5',
  url: 'http://localhost/api/kpi/trend?weeks=8',
  ms: 0
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/kpi/trend (Demo & Live) → array length >= 8 and ascending isoWeek when present
[2025-08-11T21:02:09.342Z] INFO API success {
  rid: '5e3f5b28-461e-4c45-a822-2d0a44ac456c',
  url: 'http://localhost/api/kpi/trend?weeks=8',
  ms: 2
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores-at-risk (Demo & Live) → <= 10 items; each has { storeId, storeName, zScore:number, pctChange:number }
[2025-08-11T21:02:09.343Z] INFO API success {
  rid: '45292954-7e2d-4276-a8fe-ef87531673d9',
  url: 'http://localhost/api/stores-at-risk',
  ms: 0
}
[2025-08-11T21:02:09.344Z] INFO API success {
  rid: 'dcc0ca13-cc39-4698-a704-8c2a47b4e6bf',
  url: 'http://localhost/api/stores-at-risk',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/trend (Demo & Live) → array of { isoWeek, revenue, units }
[2025-08-11T21:02:09.346Z] INFO API success {
  rid: 'fe251c02-d059-4169-b736-23a1589b8704',
  url: 'http://localhost/api/stores/101/trend?weeks=8',
  ms: 1
}
[2025-08-11T21:02:09.347Z] INFO API success {
  rid: '8f5e5094-5a43-4706-abe7-bcacce81ab74',
  url: 'http://localhost/api/stores-at-risk',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/trend (Demo & Live) → array of { isoWeek, revenue, units }
[2025-08-11T21:02:09.350Z] INFO API success {
  rid: '88d402a5-56d5-4326-b941-cae32a2e536f',
  url: 'http://localhost/api/stores/1/trend?weeks=8',
  ms: 2
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/sku-breakdown (Demo & Live) → object with items[]
[2025-08-11T21:02:09.352Z] INFO API success {
  rid: 'b9a3b2ec-0064-4eac-b696-e10aa0affb58',
  url: 'http://localhost/api/stores/101/sku-breakdown?week=latest',
  ms: 1
}
[2025-08-11T21:02:09.353Z] INFO API success {
  rid: 'a7c84e1a-a9b2-4f14-b001-dded4d0d0830',
  url: 'http://localhost/api/stores-at-risk',
  ms: 1
}

stdout | tests/smoke.test.ts > API smoke tests > GET /api/stores/:id/sku-breakdown (Demo & Live) → object with items[]
[2025-08-11T21:02:09.357Z] INFO API success {
  rid: '015afc32-9f76-4e2b-9ed7-c56b89d40982',
  url: 'http://localhost/api/stores/1/sku-breakdown?week=latest',
  ms: 3
}

 ✓ tests/smoke.test.ts  (7 tests) 63ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

stdout | tests/api/leaderboards.test.ts > Leaderboards API > GET /api/leaderboards/top-products?by=units&limit=5 (demo & live)
[2025-08-11T21:02:09.368Z] INFO API success {
  rid: '6ea57b4b-b0c3-4563-95de-b6cf47352355',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=true][by=units] sample= {
  skuId: 20005,
  skuName: 'Flux SKU 6',
  brand: 'Flux',
  revenue: 10950,
  units: 987
}
[2025-08-11T21:02:09.369Z] INFO API success {
  rid: '19146b7d-12a8-458e-86bd-e3224d88dc49',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=5',
  ms: 1
}
[LEADERBOARDS][products][demo=false][by=units] sample= {
  skuId: 20005,
  skuName: 'Flux SKU 6',
  brand: 'Flux',
  revenue: 10950,
  units: 987
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API > GET /api/leaderboards/top-products?by=revenue&limit=5 (demo & live)
[2025-08-11T21:02:09.369Z] INFO API success {
  rid: '22bc1297-1c70-498a-b789-0500ec33368a',
  url: 'http://test.local/api/leaderboards/top-products?by=revenue&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=true][by=revenue] sample= {
  skuId: 20010,
  skuName: 'Acme SKU 11',
  brand: 'Acme',
  revenue: 27970,
  units: 371
}
[2025-08-11T21:02:09.369Z] INFO API success {
  rid: '8908c3bb-e004-4166-a305-14c6304540ea',
  url: 'http://test.local/api/leaderboards/top-products?by=revenue&limit=5',
  ms: 0
}
[LEADERBOARDS][products][demo=false][by=revenue] sample= {
  skuId: 20010,
  skuName: 'Acme SKU 11',
  brand: 'Acme',
  revenue: 27970,
  units: 371
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API > GET /api/leaderboards/top-stores?limit=5 (demo & live)
[2025-08-11T21:02:09.370Z] INFO API success {
  rid: '4f93b379-a946-451d-bc17-d85c21750512',
  url: 'http://test.local/api/leaderboards/top-stores?limit=5',
  ms: 0
}
[LEADERBOARDS][stores][demo=true] sample= {
  storeId: 104,
  storeName: 'Store #104',
  city: 'Miami',
  state: 'FL',
  revenue: 116984,
  units: 1811
}
[2025-08-11T21:02:09.370Z] INFO API success {
  rid: '584ce731-3e1f-4273-9df5-7f567b4bc92a',
  url: 'http://test.local/api/leaderboards/top-stores?limit=5',
  ms: 0
}
[LEADERBOARDS][stores][demo=false] sample= {
  storeId: 104,
  storeName: 'Store #104',
  city: 'Miami',
  state: 'FL',
  revenue: 116984,
  units: 1811
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > invalid 'by' defaults to units (demo & live)
[2025-08-11T21:02:09.370Z] INFO API success {
  rid: '86dabaa9-0c5e-4ec1-94dc-36bef79b1e11',
  url: 'http://test.local/api/leaderboards/top-products?by=invalid&limit=5',
  ms: 0
}
[2025-08-11T21:02:09.370Z] INFO API success {
  rid: '713810b7-ffd8-41e0-819e-c040c69a9a15',
  url: 'http://test.local/api/leaderboards/top-products?by=invalid&limit=5',
  ms: 0
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > limit clamps to [1,20] for products (demo only)
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: '63b63a02-33fc-416c-adba-611d95256d9a',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=0',
  ms: 0
}
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: '83ea5085-968f-4b8c-a4c7-607a6f822d86',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=999',
  ms: 0
}
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: '170e2d2b-7aec-4e2b-be04-d74d8014c723',
  url: 'http://test.local/api/leaderboards/top-products?by=units&limit=5',
  ms: 0
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > limit clamps to [1,20] for stores (demo only)
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: '804747a7-3762-41fa-a656-ae73b644d21a',
  url: 'http://test.local/api/leaderboards/top-stores?limit=0',
  ms: 0
}
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: '7b29f198-68a8-4a28-9e18-16eef018cd92',
  url: 'http://test.local/api/leaderboards/top-stores?limit=999',
  ms: 0
}

stdout | tests/api/leaderboards.test.ts > Leaderboards API - edge cases > field types look correct for first item (demo only)
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: 'd908b058-c790-481b-bb32-34703a862cb1',
  url: 'http://test.local/api/leaderboards/top-products?by=revenue&limit=5',
  ms: 0
}
[2025-08-11T21:02:09.371Z] INFO API success {
  rid: '6da21923-61df-4ad9-be19-a93fd3734ebf',
  url: 'http://test.local/api/leaderboards/top-stores?limit=5',
  ms: 0
}

 ✓ tests/api/leaderboards.test.ts  (7 tests) 5ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 📡 auto-backup env with Radar: https://dotenvx.com/radar

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > fails with 400 when no Store-Sales files provided
[2025-08-11T21:02:09.387Z] INFO API success {
  rid: '5f9591fc-5d47-4127-93d1-329b31c28483',
  url: 'http://localhost/api/ingest/ulta',
  ms: 1
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests store totals without allocator (fallback to pseudo-SKU)
[2025-08-11T21:02:09.434Z] INFO API success {
  rid: 'ef490060-87bf-4292-8249-1605e49612a4',
  url: 'http://localhost/api/ingest/ulta',
  ms: 42
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests store totals without allocator (fallback to pseudo-SKU)
[2025-08-11T21:02:09.439Z] INFO API success {
  rid: '7373957d-c7d0-4ac6-a88d-2e8b1df56f8a',
  url: 'http://localhost/api/weekly-summary?view=facts&week=2025-08-17',
  ms: 4
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests with allocator and ignores additional allocator files; then idempotent on re-run
[2025-08-11T21:02:09.459Z] INFO API success {
  rid: 'e7e367a9-2b49-47da-8d9d-dd9adf3ac45d',
  url: 'http://localhost/api/ingest/ulta',
  ms: 16
}

stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests with allocator and ignores additional allocator files; then idempotent on re-run
[2025-08-11T21:02:09.468Z] INFO API success {
  rid: '8e693e6b-804e-48b5-89a4-0d8bff27f26b',
  url: 'http://localhost/api/ingest/ulta',
  ms: 7
}

 ✓ tests/api/ingest.ulta.test.ts  (3 tests) 87ms
stdout | tests/api/ingest.ulta.test.ts > POST /api/ingest/ulta > ingests with allocator and ignores additional allocator files; then idempotent on re-run
[2025-08-11T21:02:09.470Z] INFO API success {
  rid: '2257468b-8294-437c-a844-4ff7cb960c40',
  url: 'http://localhost/api/weekly-summary?view=facts&week=2025-08-17',
  ms: 1
}

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' }

stdout | tests/api/routes.test.ts > API routes return JSON > /api/config returns JSON with demoMode
[2025-08-11T21:02:09.501Z] INFO API success {
  rid: 'e60fe2c4-6cdb-4518-a372-096803896af9',
  url: 'http://test.local/api/config',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/weekly-summary returns summary JSON in demo
[2025-08-11T21:02:09.501Z] INFO API success {
  rid: '72e330cd-260a-49f8-b5f5-52fc740d3802',
  url: 'http://test.local/api/weekly-summary',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/kpi/trend returns array of points
[2025-08-11T21:02:09.501Z] INFO API success {
  rid: '92ce781a-374a-43e6-82dd-146edeeb8b59',
  url: 'http://test.local/api/kpi/trend?weeks=12',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/promo-attribution returns array of attribution items (demo and non-demo cookie)
[2025-08-11T21:02:09.509Z] INFO API success {
  rid: '3a1c0cc3-ff0b-4ffa-801a-9cf09a3ea13e',
  url: 'http://test.local/api/promo-attribution?years=2024,2025&baselineWeeks=4',
  ms: 8
}
[2025-08-11T21:02:09.510Z] INFO API success {
  rid: '679153ef-e5c2-4155-82c0-64dd11f3163a',
  url: 'http://test.local/api/promo-attribution?years=2024,2025&baselineWeeks=4',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/stores-at-risk returns array of stores
[2025-08-11T21:02:09.510Z] INFO API success {
  rid: 'f0416f58-2530-4801-8873-b6964a978330',
  url: 'http://test.local/api/stores-at-risk?lookback=8&limit=10',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/data-health returns array of weekly health
[2025-08-11T21:02:09.510Z] INFO API success {
  rid: '889ecfae-8897-4f72-8717-6150f107ffc4',
  url: 'http://test.local/api/data-health?weeks=12',
  ms: 0
}

stdout | tests/api/routes.test.ts > API routes return JSON > /api/promotions returns array of promotions
[2025-08-11T21:02:09.511Z] INFO API success {
  rid: 'd83acaa1-7d36-464f-b560-4293abfd5de5',
  url: 'http://test.local/api/promotions?years=2024,2025',
  ms: 0
}

 ✓ tests/api/routes.test.ts  (7 tests) 11ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  suppress all logs with { quiet: true }

 ✓ tests/components/leaderboards.test.ts  (12 tests) 29ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  specify custom .env file path with { path: '/custom/path/.env' }

 ✓ tests/components/dataHealthCard.test.ts  (3 tests) 3ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

stdout | tests/api/weeks.test.ts > GET /api/weeks filters out future weeks > does not include future week rows
[2025-08-11T21:02:09.609Z] INFO API success {
  rid: 'd2733f64-d716-4083-aa55-88ce1bc205eb',
  url: 'http://test.local/api/weeks',
  ms: 2
}

 ❯ tests/api/weeks.test.ts  (1 test | 1 failed) 11ms
   ❯ tests/api/weeks.test.ts > GET /api/weeks filters out future weeks > does not include future week rows
     → expected true to be false // Object.is equality
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

stdout | tests/api/ingest.ulta.warnings.test.ts > POST /api/ingest/ulta warnings (no allocator) > returns warnings indicating pseudo-UPC fallback
[2025-08-11T21:02:09.637Z] INFO API success {
  rid: '749032f6-b860-4fa3-819e-7f57b20819a3',
  url: 'http://localhost/api/ingest/ulta',
  ms: 13
}

 ✓ tests/api/ingest.ulta.warnings.test.ts  (1 test) 17ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  enable debug logging with { debug: true }

 ✓ tests/components/dataHealthCard.issues.test.ts  (1 test) 2ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 prevent committing .env to code: https://dotenvx.com/precommit

 ✓ tests/components/breadcrumbs.test.tsx  (2 tests) 1ms
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  write to custom object with { processEnv: myObject }

 ✓ tests/lib/week.test.ts  (3 tests)
stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com

 ✓ tests/api/data-health.object.test.ts  (1 test)
stdout | tests/api/data-health.object.test.ts > GET /api/data-health (object response with issues, demo) > returns { data, issues } when includeIssues=1
[2025-08-11T21:02:09.667Z] INFO API success {
  rid: '7722f584-b5de-45f8-9ad7-a4a0312f71d2',
  url: 'http://test.local/api/data-health?weeks=4&includeIssues=1',
  ms: 0
}

stdout | _log (/Users/chazhatfield/Desktop/AI Porjects/patterniq-v01/node_modules/dotenv/lib/main.js:139:11)
[dotenv@17.2.1] injecting env (0) from .env.test -- tip: ⚙️  enable debug logging with { debug: true }

Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "patterniq_test", schema "public" at "localhost:54329"

The PostgreSQL database "patterniq_test" schema "public" at "localhost:54329" was successfully reset.

🚀  Your database is now in sync with your Prisma schema. Done in 35ms

stdout | tests/setup/db.ts:15:11
[tests/setup/db] Resetting test database via: prisma db push --force-reset

 ✓ tests/components/weekPicker.test.tsx  (4 tests) 29ms

 Test Files  1 failed | 12 passed (13)
      Tests  1 failed | 51 passed (52)
   Start at  17:02:06
   Duration  4.59s (transform 289ms, setup 1.87s, collect 1.73s, tests 258ms, environment 316ms, prepare 103ms)

